final=weights[,2])
dt[, change:=final-init]
dt[, percent:=change/init]
# means
X <- dt[, .(X=mean(init)), by=treatment]
Y <- dt[, .(Y=mean(final)), by=treatment]
res_mat[iter, Xt:=X[treatment=='ob/ob', X]]
res_mat[iter, Xc:=X[treatment=='+/+', X]]
res_mat[iter, Yt:=Y[treatment=='ob/ob', Y]]
res_mat[iter, Yc:=Y[treatment=='+/+', Y]]
# simple difference model
coeffs <- coefficients(summary(lm(final ~ treatment, data=dt)))['treatmentob/ob',]
res_mat[iter, tau_post:=coeffs['Estimate']]
res_mat[iter, p_post:=coeffs['Pr(>|t|)']]
# post score ancova model
coeffs <- coefficients(summary(lm(final ~ init + treatment, data=dt)))
res_mat[iter, b:=coeffs['init','Estimate']]
res_mat[iter, tau_post_a:=coeffs['treatmentob/ob','Estimate']]
res_mat[iter, p_post_a:=coeffs['treatmentob/ob','Pr(>|t|)']]
# change score model
coeffs <- coefficients(summary(lm(change ~ treatment, data=dt)))['treatmentob/ob',]
res_mat[iter, tau_cs:=coeffs['Estimate']]
res_mat[iter, p_cs:=coeffs['Pr(>|t|)']]
# change score ancova model = post score ancova model for tau
coeffs <- coefficients(summary(lm(change ~ init + treatment, data=dt)))['treatmentob/ob',]
res_mat[iter, tau_cs_a:=coeffs['Estimate']]
res_mat[iter, p_cs_a:=coeffs['Pr(>|t|)']]
# percent model
coeffs <- coefficients(summary(lm(percent ~ treatment, data=dt)))['treatmentob/ob',]
res_mat[iter, tau_per:=coeffs['Estimate']]
res_mat[iter, p_per:=coeffs['Pr(>|t|)']]
# percent ancova model
coeffs <- coefficients(summary(lm(percent ~ init + treatment, data=dt)))['treatmentob/ob',]
res_mat[iter, tau_per_a:=coeffs['Estimate']]
res_mat[iter, p_per_a:=coeffs['Pr(>|t|)']]
# mixed model
do_mixed <- FALSE
if(do_mixed==TRUE){
dt_long <- melt(data=dt, id.vars=c('ID', 'treatment'), measure.vars=c('init', 'final'), variable.name='time', value.name='weight')
fit_lmm <- lmer(weight ~ treatment*time + (1|ID), data=dt_long)
res_mat[iter, tau_lmm:=coefficients(summary(fit_lmm))['treatmentob/ob:timefinal','Estimate']]
res_mat[iter, p_lmm:=coefficients(summary(fit_lmm))['treatmentob/ob:timefinal','Pr(>|t|)']]
# coefficients(summary(fit_lmm))
# coefficients(summary(lm(weight~treatment*time, data=dt_long)))
# coefficients(summary(lm(change~init+treatment, data=dt)))
}
# check an actual run to look at pattern if type I error in cs model and in cs + init model
if(res_mat[iter, p_cs] < 0.05 & res_mat[iter, p_cs_a] > 0.05){
gdt_cs <- copy(dt)
}
if(res_mat[iter, p_cs_a] < 0.05 & res_mat[iter, p_cs] > 0.05){
gdt_cs_a <- copy(dt)
}
# sed
# coefficients(summary(lm(change ~ init + treatment, data=dt)))
}
res <- rbind(res, data.table(rho=rho, tau=tau, res_mat))
}
}
big_melt_error <- melt(res, id.vars=c('rho','tau'), measure.vars=c('tau_post','tau_post_a','tau_cs'), variable.name='method', value.name='tau_hat')
big_melt_error[, error:=tau_hat-tau]
big_melt_error[, rho:=factor(rho)]
big_melt_error[, tau:=factor(round(tau,2))]
gg <- ggplot(data=big_melt_error, aes(x=rho, y=error, fill=method)) +
geom_boxplot() +
facet_grid(.~tau)
gg
sample(LETTERS, 6)
paste(sample(LETTERS, 6), collapse='')
fn <- paste('big_sim',code, sep='.')
code <- paste(sample(LETTERS, 6), collapse='')
fn <- paste('big_sim',code, sep='.')
fn
?save
setwd("~/Google Drive/Research/Projects/Statistical Doodles/obese mice (pre-post)")
save(res, fn)
fn
fn <- paste('big_sim',code, 'Rda', sep='.')
save(res, file=fn)
install.packages("rmarkdown")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocStyle"
source("https://bioconductor.org/biocLite.R")
biocLite("BiocInstaller")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocStyle")
install.packages("igraph")
install.packages("igraph")
library(magick)
install.packages("bookdown")
big_melt_bias_raw
library(Hmisc)
library(ggplot2)
library(mvtnorm)
library(data.table)
library("knitcitations")
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
mouse <- data.table(treatment = c('+/+', 'ob/ob'),
n = c(10, 9),
percent = c(.27, .47),
change = c(.86, 1.3),
se_percent = c(0.036, 0.083),
se_change = c(0.1, 0.2)
)
mouse[, init:=change/percent]
mouse[, final:=init+change]
mouse[, sd:=sqrt(se_change^2*n/2)] # sample sd, assume homogenous pre/post
# reorder columns
mouse <- mouse[, .SD, .SDcols=c('treatment', 'n', 'init', 'final', 'sd', 'change', 'percent', 'se_change', 'se_percent')]
# compute some statistics for later use
init_diff <- (mouse[2, init] - mouse[1, init])/sqrt(mean(mouse[,sd^2]))
final_diff <- (mouse[2, final] - mouse[1, final])/sqrt(mean(mouse[,sd^2]))
# generate replica fake data
percent.lean <- mouse[treatment=='+/+', percent]
percent.obese <- mouse[treatment=='ob/ob', percent]
percent.lean.se <- mouse[treatment=='+/+', se_percent]
percent.obese.se <- mouse[treatment=='ob/ob', se_percent]
# parameters for model
Sigma_ii <- mean(mouse[, sd^2]) # variances for both init and final
sigma <- sqrt(Sigma_ii) # standard deviations
rho <- 0.4 # pre-post correlation. I have no idea what the actual value is.
mu <- mean(mouse[, init]) # initial weight
delta <- mean(mouse[, change]) # delta is the post - pre effect for control
tau <- 0 # tau is the treatment effect (on top of delta)
Sigma <- matrix(c(c(Sigma_ii, rho*Sigma_ii), c(rho*Sigma_ii, Sigma_ii)), nrow=2)
N <- sum(mouse[, n])
load('big_sim.NSHKBZ.Rda') # will be data.table 'res'
# need mouse data
d_obs.init <- mouse[treatment=='ob/ob', init] - mouse[treatment=='+/+', init]
d_obs.change <- mouse[treatment=='ob/ob', change] - mouse[treatment=='+/+', change]
d_obs.percent <- mouse[treatment=='ob/ob', percent] - mouse[treatment=='+/+', percent]
# bias when tau = 0
res[, init_diff:=Xt-Xc]
big_melt_bias_raw
res[, tau_disp:=factor(paste('tau ==', round(tau/sigma,1)))]
res[, rho_disp:=factor(paste('rho ==', rho))]
compare <- c('tau_post', 'tau_cs', 'tau_cs_a')
big_melt_bias_raw <- melt(res, id.var=c('rho_disp', 'tau_disp', 'rho', 'tau', 'init_diff'), measure.vars=compare, variable.name='method', value.name='tau_hat')
big_melt_bias_raw[, error:=tau_hat - tau]
# big_melt_bias_raw[, .(mean_error=mean(error), tau_hat=mean(tau_hat)), by=.(method, rho, tau)]
cols <- gg_color_hue(length(compare))
gg <- ggplot(data=big_melt_bias_raw, aes(x=rho, y=error, color=method)) +
geom_point() +
ylab(expression(paste('Error ', (hat(tau) - tau)))) +
xlab('Initial Difference') +
scale_colour_manual(values = cols, labels = expression(hat(tau)['post'], hat(tau)['cs'], hat(tau))) +
facet_grid(.~tau_disp, labeller = label_parsed) +
theme_minimal()
gg
gg
big_melt_bias_raw[, rho:=factor(rho)]
gg <- ggplot(data=big_melt_bias_raw, aes(x=rho, y=error, color=method)) +
geom_point() +
ylab(expression(paste('Error ', (hat(tau) - tau)))) +
xlab('Initial Difference') +
scale_colour_manual(values = cols, labels = expression(hat(tau)['post'], hat(tau)['cs'], hat(tau))) +
facet_grid(.~tau_disp, labeller = label_parsed) +
theme_minimal()
gg
gg
gg <- ggplot(data=big_melt_bias_raw, aes(x=rho, y=error, group=method, color=method)) +
geom_boxplot() +
ylab(expression(paste('Error ', (hat(tau) - tau)))) +
xlab('Initial Difference') +
scale_colour_manual(values = cols, labels = expression(hat(tau)['post'], hat(tau)['cs'], hat(tau))) +
facet_grid(.~tau_disp, labeller = label_parsed) +
theme_minimal()
gg
gg
gg <- ggplot(data=big_melt_bias_raw, aes(x=rho, y=error, group=method, fill=method)) +
geom_boxplot() +
ylab(expression(paste('Error ', (hat(tau) - tau)))) +
xlab('Initial Difference') +
scale_colour_manual(values = cols, labels = expression(hat(tau)['post'], hat(tau)['cs'], hat(tau))) +
facet_grid(.~tau_disp, labeller = label_parsed) +
theme_minimal()
gg
gg
gg <- ggplot(data=big_melt_bias_raw, aes(x=rho, y=error, group=method, fill=method)) +
geom_boxplot() +
ylab(expression(paste('Error ', (hat(tau) - tau)))) +
xlab('Initial Difference') +
scale_colour_discrete(values = cols, labels = expression(hat(tau)['post'], hat(tau)['cs'], hat(tau))) +
facet_grid(.~tau_disp, labeller = label_parsed) +
theme_minimal()
?scale_color_discrete
gg <- ggplot(data=big_melt_bias_raw, aes(x=rho, y=error, group=method, fill=method)) +
geom_boxplot() +
ylab(expression(paste('Error ', (hat(tau) - tau)))) +
xlab('Initial Difference') +
scale_fill_manual(values = cols, labels = expression(hat(tau)['post'], hat(tau)['cs'], hat(tau))) +
facet_grid(.~tau_disp, labeller = label_parsed) +
theme_minimal()
gg
blogdown:::serve_site()
install.packages("viridis")
install.packages("viridis")
library(viridis) # color blind palette
niter <- 1000
n <- 10
N <- n*2
# parameters from code block "originalPlot"
d_obs.init <- mouse[treatment=='ob/ob', init] - mouse[treatment=='+/+', init]
d_obs.change <- mouse[treatment=='ob/ob', change] - mouse[treatment=='+/+', change]
d_obs.percent <- mouse[treatment=='ob/ob', percent] - mouse[treatment=='+/+', percent]
init_diff <- numeric(niter)
cs_diff <- numeric(niter)
percent_diff <- numeric(niter)
res_mat <- data.table(NULL)
for(rho in c(0, 0.33, 0.66, 1)){
Sigma <- matrix(c(c(sigma^2, rho*sigma^2), c(rho*sigma^2, sigma^2)), nrow=2)
for(iter in 1:niter){
# col 1 is initial weights, col 2 is final weights
weights <- rmvnorm(n=N, mean=c(mu, mu+delta), sigma=Sigma)
init <- weights[,1]
final <- weights[,2]
change <- final - init
percent <- change/init
init_diff[iter] <- mean(init[1:n]) - mean(init[(n+1):(n*2)])
cs_diff[iter] <- mean(change[1:n]) - mean(change[(n+1):(n*2)])
percent_diff[iter] <- mean(percent[1:n]) - mean(percent[(n+1):(n*2)])
}
res_mat <- rbind(res_mat, data.table(rho=rho, init=init_diff, cs=cs_diff, percent=percent_diff))
}
# plot it
res_mat[, rho:=factor(rho)]
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
scale_color_viridis()
theme_minimal(base_size=14)
gg
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
scale_color_viridis() +
theme_minimal(base_size=14)
gg
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
scale_color_viridis() +
theme_minimal(base_size=14)
gg
res_mat[, rho:=factor(rho)]
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
scale_color_viridis() +
theme_minimal(base_size=14)
gg
scale_fill_viridis() +
``
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
scale_fill_viridis() +
theme_minimal(base_size=14)
gg
gg
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
scale_color_viridis(discrete=TRUE) +
theme_minimal(base_size=14)
gg
gg
n<-3
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[2:(n+1)]
cbPalette
colorblind <- function(n){
# http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#a-colorblind-friendly-palette
return(c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[2:(n+1)])
}
res_mat[, rho:=factor(rho)]
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
#  scale_color_viridis(discrete=TRUE) +
scale_colour_manual(values=colorblind(length(levels(res_mat$rho)))) +
theme_minimal(base_size=14)
gg
labs <- levels(res_mat$rho)
cols <- colorblind(length(labs))
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
#  scale_color_viridis(discrete=TRUE) +
scale_colour_manual(values=cols, labels = labs) +
theme_minimal(base_size=14)
gg
labs
res_mat$rho
levels(res_mat$rho)
labs <- levels(res_mat$rho)
labs <- levels(res_mat$rho)
cols <- colorblind(length(labs))
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
#  scale_color_viridis(discrete=TRUE) +
scale_colour_manual(values=cols, labels = labs) +
theme_minimal(base_size=14)
gg
labs
knitr::opts_chunk$set(echo = TRUE)
library(Hmisc)
library(ggplot2)
library(mvtnorm)
library(data.table)
library(viridis) # color blind palette
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
colorblind <- function(n){
# http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#a-colorblind-friendly-palette
return(c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[2:(n+1)])
}
labs <- levels(res_mat[, rho])
cols <- colorblind(length(labs))
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
#  scale_color_viridis(discrete=TRUE) +
scale_colour_manual(values=cols, labels = labs) +
theme_minimal(base_size=14)
gg
labs
res_mat[, rho]
cols
labs
scale_colour_manual
?scale_colour_manual
res_mat[, rho:=factor(rho)]
labs <- levels(res_mat[, rho])
cols <- colorblind(length(labs))
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
ylab("Difference in change score") +
xlab("Initial difference") +
#  scale_color_viridis(discrete=TRUE) +
scale_colour_manual(values=cols, labels = labs)
gg
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
ylab("Difference in change score") +
xlab("Initial difference") +
#  scale_color_viridis(discrete=TRUE) +
scale_colour_manual(values=cols, labels = labs) +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
theme_minimal(base_size=14)
gg
gg
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
ylab("Difference in change score") +
xlab("Initial difference") +
#  scale_color_viridis(discrete=TRUE) +
scale_colour_manual(values=cols, labels = labs) +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
theme_minimal(base_size=14)
gg
colorblind_brewer <- function(n){
# http://colorbrewer2.org/#type=qualitative&scheme=Paired&n=4
return(c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c")[1:n])
}
knitr::opts_chunk$set(echo = TRUE)
library(Hmisc)
library(ggplot2)
library(mvtnorm)
library(data.table)
library(viridis) # color blind palette
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
colorblind <- function(n){
# http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#a-colorblind-friendly-palette
return(c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[2:(n+1)])
}
colorblind_brewer <- function(n){
# http://colorbrewer2.org/#type=qualitative&scheme=Paired&n=4
return(c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c")[1:n])
}
cols <- colorblind_brewer(length(labs))
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
#  scale_color_viridis(discrete=TRUE) +
scale_colour_manual(values=cols, labels = labs) +
theme_minimal(base_size=14)
gg
colorblind <- function(n){
# http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#a-colorblind-friendly-palette
return(c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[2:(n+1)])
}
cols <- colorblind(length(labs))
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
#  scale_color_viridis(discrete=TRUE) +
scale_colour_manual(values=cols, labels = labs) +
theme_minimal(base_size=14)
gg
gg
cols
colorblind <- function(n){
# http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#a-colorblind-friendly-palette
return(c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[1:n])
}
theme_minimal(base_size=14)
cols <- colorblind(length(labs))
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
#  scale_color_viridis(discrete=TRUE) +
scale_colour_manual(values=cols, labels = labs) +
theme_minimal(base_size=14)
gg
cols <- colorblind_brewer(length(labs))
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
#  scale_color_viridis(discrete=TRUE) +
scale_colour_manual(values=cols, labels = labs) +
theme_minimal(base_size=14)
gg
cols <- viridis(5)[1:4]
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
#  scale_color_viridis(discrete=TRUE) +
scale_colour_manual(values=cols, labels = labs) +
theme_minimal(base_size=14)
gg
cols <- viridis(4)[1:4]
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
#  scale_color_viridis(discrete=TRUE) +
scale_colour_manual(values=cols, labels = labs) +
theme_minimal(base_size=14)
gg
cols <- colorblind(length(labs))
gg <- ggplot(data=res_mat, aes(x=init, y=cs, color=rho)) +
geom_point() +
geom_point(aes(x=d_obs.init, y=d_obs.change), color='black', shape='X', size=5) +
ylab("Difference in change score") +
xlab("Initial difference") +
#  scale_color_viridis(discrete=TRUE) +
scale_colour_manual(values=cols, labels = labs) +
theme_minimal(base_size=14)
gg
big_melt_T1 <- melt(res[tau==0], id.vars=c('rho','tau'), measure.vars=c('p_post', 'p_cs','p_per', 'p_cs_a','p_per_a'), variable.name='method', value.name='prob')
big_melt_T1[, rho:=factor(rho)]
#big_melt_T1[, tau:=factor(round(tau,2))]
big_melt_T1[, t1:=ifelse(prob<=0.05, 1, 0)]
#big_melt_T1[, t2:=ifelse(prob>0.05, 1, 0)]
niter <- big_melt_T1[,.(N=.N), by=.(rho, method)][1,N]
T1_table <- big_melt_T1[, .(t1=sum(t1)/niter), by=.(rho, tau, method)]
compare <- levels(T1_table$method)
cols <- colorblind(length(compare))
cols
compare
gg <- ggplot(data=T1_table, aes(x=rho, y=t1, group=method, color=method)) +
geom_point() +
geom_line() +
ylab("Type I error") +
scale_color_manual(values=cols, labels=c(expression(hat(tau)[post]),
expression(hat(tau)[cs]),
expression(hat(tau)['%']),
expression(hat(tau)),
expression(hat(tau)*minute))) +
theme_minimal() +
theme(legend.text.align = 0)
gg
